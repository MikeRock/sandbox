$current-theme: null !default;
$env: development !default;

@mixin themify ($attr:null, $themes: $themes) {

  @each $theme in $themes {
    $current-theme: $theme !global;

    @if $attr==null {
      :global(#{$theme}) & {
        @content;
      }
    }

    @else {
      &[data-#{$attr}="#{$theme}"] {
        @content;
      }
    }
  }
}

@mixin hardware($backface: true, $perspective: 1000) {
  @if $backface {
    backface-visibility: hidden;
  }

  perspective: $perspective;
}

@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin retina($image, $width, $height) {

  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    /* Serving 2x image on Retina display */
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin font-face($font-name, $file-name, $font-display: swap, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + '.eot');
    src: url($file-name + '.eot?#iefix') format('embedded-opentype'),
    url($file-name + '.woff') format('woff'),
    url($file-name + '.ttf') format('truetype'),
    url($file-name + '.svg##{$font-name}') format('svg');
    font-weight: $weight;
    font-display: $font-display;
    font-style: $style;
  }
}

@mixin screen($size) {
  $desktop: "(min-width: 1024px)";
  $tablet: "(min-width: 768px) and (max-width: 1023px)";
  $mobile: "(max-width: 767px)";

  @if $size==desktop {
    @media only screen and #{$desktop} {
      @content;
    }
  }

  @else if $size==tablet {
    @media only screen and #{$tablet} {
      @content;
    }
  }

  @else if $size==mobile {
    @media only screen and #{$mobile} {
      @content;
    }
  }

  @else {
    @media only screen and #{$size} {
      @content;
    }
  }
}

@function rem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

// @include ratio(16,9)
@mixin ratio($width, $height) {
  position: relative;

  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  >[data-src] {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin redline() {
  @if $env==development {

    body *,
    body *:before,
    body *:after {
      border: 1px solid red;
    }
  }
}